This is doc/cpp.info, produced by makeinfo version 4.0 from
doc/cpp.texi.

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* Cpp: (cpp).		       The GNU C preprocessor.
END-INFO-DIR-ENTRY


File: cpp.info,  Node: Invocation,  Next: Index of Directives,  Prev: Implementation Details,  Up: Top

Invocation
**********

   Most often when you use the C preprocessor you will not have to
invoke it explicitly: the C compiler will do so automatically.
However, the preprocessor is sometimes useful on its own.  All the
options listed here are also acceptable to the C compiler and have the
same meaning, except that the C compiler has different rules for
specifying the output file.

   *Note:* Whether you use the preprocessor by way of `gcc' or `cpp',
the "compiler driver" is run first.  This program's purpose is to
translate your command into invocations of the programs that do the
actual work.  Their command line interfaces are similar but not
identical to the documented interface, and may change without notice.

   The C preprocessor expects two file names as arguments, INFILE and
OUTFILE.  The preprocessor reads INFILE together with any other files
it specifies with `#include'.  All the output generated by the combined
input files is written in OUTFILE.

   Either INFILE or OUTFILE may be `-', which as INFILE means to read
from standard input and as OUTFILE means to write to standard output.
Also, if either file is omitted, it means the same as if `-' had been
specified for that file.

   All single-letter options which take an argument may have that
argument appear immediately after the option letter, or with a space
between option and argument:  `-Ifoo' and `-I foo' have the same
effect.  Long options that take arguments require a space between option
and argument.

`-D NAME'
     Predefine NAME as a macro, with definition `1'.

`-D NAME=DEFINITION'
     Predefine NAME as a macro, with definition DEFINITION.  There are
     no restrictions on the contents of DEFINITION, but if you are
     invoking the preprocessor from a shell or shell-like program you
     may need to use the shell's quoting syntax to protect characters
     such as spaces that have a meaning in the shell syntax.  If you
     use more than one `-D' for the same NAME, the rightmost definition
     takes effect.

     If you wish to define a function-like macro on the command line,
     write its argument list with surrounding parentheses before the
     equals sign (if any).  Parentheses are meaningful to most shells,
     so you will need to quote the option.  With `sh' and `csh',
     `-D'NAME(ARGS...)=DEFINITION'' works.

`-U NAME'
     Cancel any previous definition of NAME, either built in or
     provided with a `-D' option.

     All `-imacros FILE' and `-include FILE' options are processed
     after all `-D' and `-U' options.

`-undef'
     Do not predefine any system-specific macros.  The common predefined
     macros remain defined.

`-I DIR'
     Add the directory DIR to the list of directories to be searched
     for header files.  *Note Search Path::.  Directories named by `-I'
     are searched before the standard system include directories.

     It is dangerous to specify a standard system include directory in
     an `-I' option.  This defeats the special treatment of system
     headers (*note System Headers::).  It can also defeat the repairs
     to buggy system headers which GCC makes when it is installed.

`-o FILE'
     Write output to FILE.  This is the same as specifying FILE as the
     second non-option argument to `cpp'.  `gcc' has a different
     interpretation of a second non-option argument, so you must use
     `-o' to specify the output file.

`-Wall'
     Turns on all optional warnings which are desirable for normal
     code.  At present this is `-Wcomment' and `-Wtrigraphs'.  Note that
     many of the preprocessor's warnings are on by default and have no
     options to control them.

`-Wcomment'
`-Wcomments'
     Warn whenever a comment-start sequence `/*' appears in a `/*'
     comment, or whenever a backslash-newline appears in a `//' comment.
     (Both forms have the same effect.)

`-Wtrigraphs'
     Warn if any trigraphs are encountered.  This option used to take
     effect only if `-trigraphs' was also specified, but now works
     independently.  Warnings are not given for trigraphs within
     comments, as they do not affect the meaning of the program.

`-Wtraditional'
     Warn about certain constructs that behave differently in
     traditional and ISO C.  Also warn about ISO C constructs that have
     no traditional C equivalent, and problematic constructs which
     should be avoided.  *Note Traditional Mode::.

`-Wimport'
     Warn the first time `#import' is used.

`-Wundef'
     Warn whenever an identifier which is not a macro is encountered in
     an `#if' directive, outside of `defined'.  Such identifiers are
     replaced with zero.

`-Werror'
     Make all warnings into hard errors.  Source code which triggers
     warnings will be rejected.

`-Wsystem-headers'
     Issue warnings for code in system headers.  These are normally
     unhelpful in finding bugs in your own code, therefore suppressed.
     If you are responsible for the system library, you may want to see
     them.

`-w'
     Suppress all warnings, including those which GNU CPP issues by
     default.

`-pedantic'
     Issue all the mandatory diagnostics listed in the C standard.
     Some of them are left out by default, since they trigger
     frequently on harmless code.

`-pedantic-errors'
     Issue all the mandatory diagnostics, and make all mandatory
     diagnostics into errors.  This includes mandatory diagnostics that
     GCC issues without `-pedantic' but treats as warnings.

`-M'
     Instead of outputting the result of preprocessing, output a rule
     suitable for `make' describing the dependencies of the main source
     file.  The preprocessor outputs one `make' rule containing the
     object file name for that source file, a colon, and the names of
     all the included files, including those coming from `-include' or
     `-imacros' command line options.

     Unless specified explicitly (with `-MT' or `-MQ'), the object file
     name consists of the basename of the source file with any suffix
     replaced with object file suffix.  If there are many included
     files then the rule is split into several lines using `\'-newline.
     The rule has no commands.

`-MM'
     Like `-M', but mention only the files included with
     `#include "FILE"' or with `-include' or `-imacros' command line
     options.  System header files included with `#include <FILE>' are
     omitted.

`-MF FILE'
     When used with `-M' or `-MM', specifies a file to write the
     dependencies to.  This allows the preprocessor to write the
     preprocessed file to stdout normally.  If no `-MF' switch is
     given, CPP sends the rules to stdout and suppresses normal
     preprocessed output.

`-MG'
     When used with `-M' or `-MM', `-MG' says to treat missing header
     files as generated files and assume they live in the same
     directory as the source file.  It suppresses preprocessed output,
     as a missing header file is ordinarily an error.

     This feature is used in automatic updating of makefiles.

`-MP'
     This option instructs CPP to add a phony target for each dependency
     other than the main file, causing each to depend on nothing.  These
     dummy rules work around errors `make' gives if you remove header
     files without updating the `Makefile' to match.

     This is typical output:

          test.o: test.c test.h
          
          test.h:

`-MT TARGET'
     Change the target of the rule emitted by dependency generation.  By
     default CPP takes the name of the main input file, including any
     path, deletes any file suffix such as `.c', and appends the
     platform's usual object suffix.  The result is the target.

     An `-MT' option will set the target to be exactly the string you
     specify.  If you want multiple targets, you can specify them as a
     single argument to `-MT', or use multiple `-MT' options.

     For example, `-MT '$(objpfx)foo.o'' might give

          $(objpfx)foo.o: foo.c

`-MQ TARGET'
     Same as `-MT', but it quotes any characters which are special to
     Make. `-MQ '$(objpfx)foo.o'' gives

          $$(objpfx)foo.o: foo.c

     The default target is automatically quoted, as if it were given
     with `-MQ'.

`-MD FILE'
`-MMD FILE'
     `-MD FILE' is equivalent to `-M -MF FILE', and `-MMD FILE' is
     equivalent to `-MM -MF FILE'.

     Due to limitations in the compiler driver, you must use these
     switches when you want to generate a dependency file as a
     side-effect of normal compilation.

`-x c'
`-x c++'
`-x objective-c'
`-x assembler-with-cpp'
     Specify the source language: C, C++, Objective-C, or assembly.
     This has nothing to do with standards conformance or extensions;
     it merely selects which base syntax to expect.  If you give none
     of these options, cpp will deduce the language from the extension
     of the source file: `.c', `.cc', `.m', or `.S'.  Some other common
     extensions for C++ and assembly are also recognized.  If cpp does
     not recognize the extension, it will treat the file as C; this is
     the most generic mode.

     *Note:* Previous versions of cpp accepted a `-lang' option which
     selected both the language and the standards conformance level.
     This option has been removed, because it conflicts with the `-l'
     option.

`-std=STANDARD'
`-ansi'
     Specify the standard to which the code should conform.  Currently
     cpp only knows about the standards for C; other language standards
     will be added in the future.

     STANDARD may be one of:
    `iso9899:1990'
    `c89'
          The ISO C standard from 1990.  `c89' is the customary
          shorthand for this version of the standard.

          The `-ansi' option is equivalent to `-std=c89'.

    `iso9899:199409'
          The 1990 C standard, as amended in 1994.

    `iso9899:1999'
    `c99'
    `iso9899:199x'
    `c9x'
          The revised ISO C standard, published in December 1999.
          Before publication, this was known as C9X.

    `gnu89'
          The 1990 C standard plus GNU extensions.  This is the default.

    `gnu99'
    `gnu9x'
          The 1999 C standard plus GNU extensions.

`-I-'
     Split the include path.  Any directories specified with `-I'
     options before `-I-' are searched only for headers requested with
     `#include "FILE"'; they are not searched for `#include <FILE>'.
     If additional directories are specified with `-I' options after
     the `-I-', those directories are searched for all `#include'
     directives.

     In addition, `-I-' inhibits the use of the directory of the current
     file directory as the first search directory for
     `#include "FILE"'.  *Note Search Path::.

`-nostdinc'
     Do not search the standard system directories for header files.
     Only the directories you have specified with `-I' options (and the
     directory of the current file, if appropriate) are searched.

`-nostdinc++'
     Do not search for header files in the C++-specific standard
     directories, but do still search the other standard directories.
     (This option is used when building the C++ library.)

`-include FILE'
     Process FILE as if `#include "file"' appeared as the first line of
     the primary source file.  However, the first directory searched
     for FILE is the preprocessor's working directory _instead of_ the
     directory containing the main source file.  If not found there, it
     is searched for in the remainder of the `#include "..."' search
     chain as normal.

     If multiple `-include' options are given, the files are included
     in the order they appear on the command line.

`-imacros FILE'
     Exactly like `-include', except that any output produced by
     scanning FILE is thrown away.  Macros it defines remain defined.
     This allows you to acquire all the macros from a header without
     also processing its declarations.

     All files specified by `-imacros' are processed before all files
     specified by `-include'.

`-idirafter DIR'
     Search DIR for header files, but do it _after_ all directories
     specified with `-I' and the standard system directories have been
     exhausted.  DIR is treated as a system include directory.

`-iprefix PREFIX'
     Specify PREFIX as the prefix for subsequent `-iwithprefix'
     options.  If the prefix represents a directory, you should include
     the final `/'.

`-iwithprefix DIR'
`-iwithprefixbefore DIR'
     Append DIR to the prefix specified previously with `-iprefix', and
     add the resulting directory to the include search path.
     `-iwithprefixbefore' puts it in the same place `-I' would;
     `-iwithprefix' puts it where `-idirafter' would.

     Use of these options is discouraged.

`-isystem DIR'
     Search DIR for header files, after all directories specified by
     `-I' but before the standard system directories.  Mark it as a
     system directory, so that it gets the same special treatment as is
     applied to the standard system directories.  *Note System
     Headers::.

`-fpreprocessed'
     Indicate to the preprocessor that the input file has already been
     preprocessed.  This suppresses things like macro expansion,
     trigraph conversion, escaped newline splicing, and processing of
     most directives.  In this mode the integrated preprocessor is
     little more than a tokenizer for the front ends.

     `-fpreprocessed' is implicit if the input file has one of the
     extensions `.i', `.ii' or `.mi'.  These are the extensions that
     GCC uses for preprocessed files created by `-save-temps'.

`-ftabstop=WIDTH'
     Set the distance between tab stops.  This helps the preprocessor
     report correct column numbers in warnings or errors, even if tabs
     appear on the line.  If the value is less than 1 or greater than
     100, the option is ignored.  The default is 8.

`-fno-show-column'
     Do not print column numbers in diagnostics.  This may be necessary
     if diagnostics are being scanned by a program that does not
     understand the column numbers, such as `dejagnu'.

`-A PREDICATE=ANSWER'
     Make an assertion with the predicate PREDICATE and answer ANSWER.
     This form is preferred to the older form `-A PREDICATE(ANSWER)',
     which is still supported, because it does not use shell special
     characters.  *Note Assertions::.

`-A -PREDICATE=ANSWER'
     Cancel an assertion with the predicate PREDICATE and answer ANSWER.

`-A-'
     Cancel all predefined assertions and all assertions preceding it on
     the command line.  Also, undefine all predefined macros and all
     macros preceding it on the command line.  (This is a historical
     wart and may change in the future.)

`-dM'
     Instead of the normal output, generate a list of `#define'
     directives for all the macros defined during the execution of the
     preprocessor, including predefined macros.  This gives you a way of
     finding out what is predefined in your version of the preprocessor.
     Assuming you have no file `foo.h', the command

          touch foo.h; cpp -dM foo.h

     will show all the predefined macros.

`-dD'
     Like `-dM' except in two respects: it does _not_ include the
     predefined macros, and it outputs _both_ the `#define' directives
     and the result of preprocessing.  Both kinds of output go to the
     standard output file.

`-dN'
     Like `-dD', but emit only the macro names, not their expansions.

`-dI'
     Output `#include' directives in addition to the result of
     preprocessing.

`-P'
     Inhibit generation of linemarkers in the output from the
     preprocessor.  This might be useful when running the preprocessor
     on something that is not C code, and will be sent to a program
     which might be confused by the linemarkers.  *Note Preprocessor
     Output::.

`-C'
     Do not discard comments.  All comments are passed through to the
     output file, except for comments in processed directives, which
     are deleted along with the directive.  Comments appearing in the
     expansion list of a macro will be preserved, and appear in place
     wherever the macro is invoked.

     You should be prepared for side effects when using `-C'; it causes
     the preprocessor to treat comments as tokens in their own right.
     For example, macro redefinitions that were trivial when comments
     were replaced by a single space might become significant when
     comments are retained.  Also, comments appearing at the start of
     what would be a directive line have the effect of turning that
     line into an ordinary source line, since the first token on the
     line is no longer a `#'.

`-gcc'
     Define the macros __GNUC__, __GNUC_MINOR__ and
     __GNUC_PATCHLEVEL__. These are defined automatically when you use
     `gcc -E'; you can turn them off in that case with `-no-gcc'.

`-traditional'
     Try to imitate the behavior of old-fashioned C, as opposed to ISO
     C. *Note Traditional Mode::.

`-trigraphs'
     Process trigraph sequences.  *Note Initial processing::.

`-remap'
     Enable special code to work around file systems which only permit
     very short file names, such as MS-DOS.

`-$'
     Forbid the use of `$' in identifiers.  The C standard allows
     implementations to define extra characters that can appear in
     identifiers.  By default GNU CPP permits `$', a common extension.

`-h'
`--help'
`--target-help'
     Print text describing all the command line options instead of
     preprocessing anything.

`-v'
     Verbose mode.  Print out GNU CPP's version number at the beginning
     of execution, and report the final form of the include path.

`-H'
     Print the name of each header file used, in addition to other
     normal activities.  Each name is indented to show how deep in the
     `#include' stack it is.

`-version'
`--version'
     Print out GNU CPP's version number.  With one dash, proceed to
     preprocess as normal.  With two dashes, exit immediately.


File: cpp.info,  Node: Index of Directives,  Next: Concept Index,  Prev: Invocation,  Up: Top

Index of Directives
*******************

* Menu:

* #assert:                               Assertions.
* #define:                               Object-like Macros.
* #elif:                                 Elif.
* #else:                                 Else.
* #endif:                                Ifdef.
* #error:                                Diagnostics.
* #ident:                                Other Directives.
* #if:                                   Conditional Syntax.
* #ifdef:                                Ifdef.
* #ifndef:                               Ifdef.
* #import:                               Obsolete once-only headers.
* #include:                              Include Syntax.
* #include_next:                         Wrapper Headers.
* #line:                                 Line Control.
* #pragma GCC dependency:                Pragmas.
* #pragma GCC poison:                    Pragmas.
* #pragma GCC system_header <1>:         Pragmas.
* #pragma GCC system_header:             System Headers.
* #sccs:                                 Other Directives.
* #unassert:                             Assertions.
* #undef:                                Undefining and Redefining Macros.
* #warning:                              Diagnostics.


File: cpp.info,  Node: Concept Index,  Prev: Index of Directives,  Up: Top

Concept Index
*************

* Menu:

* # operator:                            Stringification.
* ## operator:                           Concatenation.
* _Pragma:                               Pragmas.
* arguments:                             Macro Arguments.
* arguments in macro definitions:        Macro Arguments.
* assertions:                            Assertions.
* assertions, cancelling:                Assertions.
* backslash-newline:                     Initial processing.
* block comments:                        Initial processing.
* C++ named operators:                   C++ Named Operators.
* character constants:                   Tokenization.
* character sets:                        Initial processing.
* command line:                          Invocation.
* commenting out code:                   Deleted Code.
* comments:                              Initial processing.
* common predefined macros:              Common Predefined Macros.
* computed includes:                     Computed Includes.
* concatenation:                         Concatenation.
* conditional group:                     Ifdef.
* conditionals:                          Conditionals.
* continued lines:                       Initial processing.
* controlling macro:                     Once-Only Headers.
* defined:                               Defined.
* diagnostic:                            Diagnostics.
* differences from previous versions:    Differences from previous versions.
* directive line:                        The preprocessing language.
* directive name:                        The preprocessing language.
* directives:                            The preprocessing language.
* empty macro arguments:                 Macro Arguments.
* expansion of arguments:                Argument Prescan.
* function-like macros:                  Function-like Macros.
* guard macro:                           Once-Only Headers.
* header file:                           Header Files.
* header file names:                     Tokenization.
* identifiers:                           Tokenization.
* implementation limits:                 Implementation limits.
* implementation-defined behavior:       Implementation-defined behavior.
* including just once:                   Once-Only Headers.
* invalid token paste:                   Miscellaneous obsolete features.
* invocation:                            Invocation.
* iso646.h:                              C++ Named Operators.
* line comments:                         Initial processing.
* line control:                          Line Control.
* line endings:                          Initial processing.
* linemarkers:                           Preprocessor Output.
* macro argument expansion:              Argument Prescan.
* macros in include:                     Computed Includes.
* macros with arguments:                 Macro Arguments.
* macros with variable arguments:        Variadic Macros.
* manifest constants:                    Object-like Macros.
* multi-line string constants:           Miscellaneous obsolete features.
* named operators:                       C++ Named Operators.
* newlines in macro arguments:           Newlines in Arguments.
* null directive:                        Other Directives.
* numbers:                               Tokenization.
* object-like macro:                     Object-like Macros.
* options:                               Invocation.
* other tokens:                          Tokenization.
* output format:                         Preprocessor Output.
* overriding a header file:              Wrapper Headers.
* parentheses in macro bodies:           Operator Precedence Problems.
* pitfalls of macros:                    Macro Pitfalls.
* pragma poison:                         Miscellaneous obsolete features.
* predefined macros:                     Predefined Macros.
* predefined macros, system-specific:    System-specific Predefined Macros.
* predicates:                            Assertions.
* preprocessing directives:              The preprocessing language.
* preprocessing numbers:                 Tokenization.
* preprocessing tokens:                  Tokenization.
* prescan of macro arguments:            Argument Prescan.
* problems with macros:                  Macro Pitfalls.
* punctuators:                           Tokenization.
* redefining macros:                     Undefining and Redefining Macros.
* repeated inclusion:                    Once-Only Headers.
* reporting errors:                      Diagnostics.
* reporting warnings:                    Diagnostics.
* reserved namespace:                    System-specific Predefined Macros.
* self-reference:                        Self-Referential Macros.
* semicolons (after macro calls):        Swallowing the Semicolon.
* side effects (in macro arguments):     Duplication of Side Effects.
* standard predefined macros.:           Standard Predefined Macros.
* string constants:                      Tokenization.
* string literals:                       Tokenization.
* stringification:                       Stringification.
* symbolic constants:                    Object-like Macros.
* system header files <1>:               System Headers.
* system header files:                   Header Files.
* system-specific predefined macros:     System-specific Predefined Macros.
* testing predicates:                    Assertions.
* token concatenation:                   Concatenation.
* token pasting:                         Concatenation.
* tokens:                                Tokenization.
* trigraphs:                             Initial processing.
* undefining macros:                     Undefining and Redefining Macros.
* unsafe macros:                         Duplication of Side Effects.
* variable number of arguments:          Variadic Macros.
* variadic macros:                       Variadic Macros.
* wrapper #ifndef:                       Once-Only Headers.
* wrapper headers:                       Wrapper Headers.


